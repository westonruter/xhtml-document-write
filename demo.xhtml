<?xml version="1.0"?>
<!--
XHTML documment.write() Support (v1.0)
 <http://code.google.com/p/shepherd-interactive/wiki/XHTMLDocumentWrite>
 by Weston Ruter, Shepherd Interactive <http://www.shepherd-interactive.com/>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

$Id: xhtml-document-write.js 7 2008-05-15 20:15:17Z westonruter $
Copyright 2008, Shepherd Interactive. All rights reserved.
-->
<!DOCTYPE html><!-- XHTML5 -->
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>XHTML document.write() Support Demo</title>
	</head>
	<body>
		<h1>XHTML <code>document.write()</code> Support Demo</h1>
		
		
		<!-- BEGIN *********************************-->
		
		<!--<script type = "text/javascript" src="htmlparser.js"></script>-->
		<script type="text/javascript" src="xhtml-document-write.js"></script>
		
		<style type="text/css">
		#demo-result {
			background-color:#C0FFC0;
			vertical-align:middle;
			font-weight:bold;
			text-decoration:none;
			white-space:nowrap;
		}
		#demo-result.loading {
			font-style:italic;
			color:gray;
			background-color:transparent;
			text-decoration:blink;
		}
		</style>
		
		<p>Google's AJAX APIs provide some incredible tools which equip web developers to do some amazing things. I've lately been dazzeled by the power and accuracy of their
		<a href="http://code.google.com/apis/ajaxlanguage/">AJAX Language API</a> and also of the performance and convenience afforded
		by their <a href="http://code.google.com/apis/ajaxlibs/">AJAX Libraries API</a>. The only issue I have with their APIs is that the fundamental 
		<code>google.load()</code> function uses <code>document.write()</code> to ouput the necessary <code>script</code> elements to the DOM,
		which doesn't even appear to be necessary since <code>google.setOnLoadCallback()</code> executes after the scripts are loaded without using <code>document.write()</code>
		(but instead appended document with DOM methods). And the reason why using <code>document.write()</code> is bad, of course, is that it is not available when in XHTML.</p>
		
		<p>Likewise, Google's AdSense program provides a great way for web authors to make get some compensation for their hard work.
		But it too relies on <code>document.write()</code> to output the necessary <code>iframe</code> element to display the
		advertisement. This has been <a href="http://en.wikipedia.org/wiki/AdSense#XHTML_Compatibility">well noted</a>, and a <a href="http://www.456bereastreet.com/archive/200409/content_negotiation_adsense_and_comments/">workaround</a> has been
		developed which utilizes the an <code>object</code> element. However, there is another solution which enables AdSense to work in XHTML
		without any HTML workaround, and which allows web authors to use the Google Ajax APIs in XHTML pages: simply define and implement
		<code>document.write()</code> yourself, as <a href="http://shepherd-interactive.googlecode.com/svn/trunk/xhtml-document-write/xhtml-document-write.js">this script</a> does.
		</p>

		<p>This implementation of <code>document.write()</code> parses the string argument of HTML markup into DOM nodes and appends them to the
		document immediately after the requesting <code>script</code> element if the DOM has not yet been completely loaded. If the DOM has been loaded,
		then it appends the parsed nodes to the end of the <code>body</code>. It does not yet allow arbitrary HTML markup since
		I can't seem to get John Resig's <a href="http://ejohn.org/blog/pure-javascript-html-parser/">HTML Parser</a> to work in Safari 3
		(if you include his library then this implementation will use it instead of the very-limited parser that is included in the script;
		try out his library so you can help diagnose the issue in Safari 3). Currently the parser included is able to 
		can output any single empty HTML element, such as <code>script</code> or <code>iframe</code>.
		</p>

		<p>Now for <strong>some examples</strong>, which of course will work when the document is served as both <code>application/xhtml+xml</code>
		and <code>text/html</code>, as in the case of MSIE. First what follows this paragraph is the canonical AdSense <code>script</code>
		elements which will output an advertisement:</p>
		
		<script type="text/javascript">
		google_ad_client = "pub-0540872133321296";
		/* 125x125, created 6/1/08 */
		google_ad_slot = "9966627566";
		google_ad_width = 125;
		google_ad_height = 125;
		</script>
		<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
	
		
		<p>And to illustrate the use of the Google AJAX APIs, the phrase “<strong>Hello world!</strong>” (loaded from an
		<a href="http://shepherd-interactive.googlecode.com/svn/trunk/xhtml-document-write/sourceText.js">external script</a>)
		is translated into Spanish via Google's <a href="http://code.google.com/apis/ajaxlanguage/">AJAX Language API</a> and
		then animated using <a href="http://jquery.com/">jQuery</a>: <span id="demo-result" class='loading'>Loading...</span></p>
	
		<p>The Language API is loaded via <code>google.load('language', 1)</code> and its completed load-state is detected by <code>google.setOnLoadCallback()</code>.
		The completed load-state of the <code>sourceText</code> variable is then detected with this anonymous polling function:
		</p>

<pre><code>(function(){
    if(window.sourceText){
        //ready to work!
    }
    else
        setTimeout(arguments.callee, 10);
})();</code></pre>
	
		<!--<p>This document may be served as either <code>application/xhtml+xml</code> or <code>text/html</code> (i.e. for IE).</p>-->
		
		<script type="text/javascript" src="http://www.google.com/jsapi"></script>
		<script type="text/javascript">
		//The sourceText variable is loaded by loading the following script. This demonstrates how to detect when a script has been
		//  asyncronously loaded if the library does not support something like google.setOnLoadCallback()
		document.write("\u003Cscript type='text/javascript' src='sourceText.js'\u003E\u003C/"+"script\u003E");
		</script>
		<script type="text/javascript">
		google.load('language', 1);
		if(!window.jQuery)
			google.load('jquery', 1);
		google.setOnLoadCallback(function() {
			//This anonymous polling function can be used to check every 10ms whether the sourceText variable has been loaded
			(function(){
				if(window.sourceText){
					google.language.translate("Hello world!", "", "es", function(result){
						var span = document.getElementById('demo-result');
						span.removeChild(span.firstChild);
						span.appendChild(document.createTextNode(result.translation));
						span.className = "";
						
						$("#demo-result").animate({
							//fontSize: "2em",
							paddingLeft:"20px",
							paddingRight:"20px"
						});
					});
				}
				else //recursive call to check again
					setTimeout(arguments.callee, 1000);
			})();
		});
		</script>
		
		<p>Please comment with any suggestions or feedback!</p>
		
		<!-- END *********************************-->
	
		<hr />
		<address>
			<a href="http://weston.ruter.net/">Weston Ruter</a>, <a href="http://www.shepherd-interactive.com/">Shepherd Interactive</a><br />
			May 2008
		</address>
	</body>
</html>